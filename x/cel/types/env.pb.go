// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/cel/v1beta1/env.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Kind is a definition for a set of expressions
// A kind consists of expected environment and expression type
type Kind struct {
	Id      string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Typedef v1alpha1.Type `protobuf:"bytes,2,opt,name=typedef,proto3" json:"typedef" yaml:"typedef"`
	Env     Env           `protobuf:"bytes,3,opt,name=env,proto3" json:"env" yaml:"env"`
}

func (m *Kind) Reset()         { *m = Kind{} }
func (m *Kind) String() string { return proto.CompactTextString(m) }
func (*Kind) ProtoMessage()    {}
func (*Kind) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c7870fa5d5767c, []int{0}
}
func (m *Kind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kind.Merge(m, src)
}
func (m *Kind) XXX_Size() int {
	return m.Size()
}
func (m *Kind) XXX_DiscardUnknown() {
	xxx_messageInfo_Kind.DiscardUnknown(m)
}

var xxx_messageInfo_Kind proto.InternalMessageInfo

func (m *Kind) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Kind) GetTypedef() v1alpha1.Type {
	if m != nil {
		return m.Typedef
	}
	return v1alpha1.Type{}
}

func (m *Kind) GetEnv() Env {
	if m != nil {
		return m.Env
	}
	return Env{}
}

// Env is used for constructing cel env
type Env struct {
	Id    string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Decls []*v1alpha1.Decl `protobuf:"bytes,2,rep,name=decls,proto3" json:"decls,omitempty" yaml:"decls"`
}

func (m *Env) Reset()         { *m = Env{} }
func (m *Env) String() string { return proto.CompactTextString(m) }
func (*Env) ProtoMessage()    {}
func (*Env) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c7870fa5d5767c, []int{1}
}
func (m *Env) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Env) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Env.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Env) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Env.Merge(m, src)
}
func (m *Env) XXX_Size() int {
	return m.Size()
}
func (m *Env) XXX_DiscardUnknown() {
	xxx_messageInfo_Env.DiscardUnknown(m)
}

var xxx_messageInfo_Env proto.InternalMessageInfo

func (m *Env) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Env) GetDecls() []*v1alpha1.Decl {
	if m != nil {
		return m.Decls
	}
	return nil
}

func init() {
	proto.RegisterType((*Kind)(nil), "osmosis.cel.v1beta1.Kind")
	proto.RegisterType((*Env)(nil), "osmosis.cel.v1beta1.Env")
}

func init() { proto.RegisterFile("osmosis/cel/v1beta1/env.proto", fileDescriptor_f0c7870fa5d5767c) }

var fileDescriptor_f0c7870fa5d5767c = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbd, 0x6e, 0xa3, 0x40,
	0x14, 0x85, 0x19, 0xd8, 0x1f, 0x79, 0xf6, 0xa7, 0x60, 0xad, 0x15, 0x6b, 0xc9, 0x83, 0x45, 0xb1,
	0x72, 0xb3, 0x33, 0xf2, 0x6e, 0xb7, 0xc5, 0x16, 0x68, 0xdd, 0x24, 0x4d, 0x84, 0x52, 0xa5, 0x89,
	0x60, 0xb8, 0x81, 0x51, 0x30, 0x33, 0x32, 0x18, 0xd9, 0x6f, 0x91, 0xb7, 0xc9, 0x2b, 0xb8, 0x74,
	0x99, 0x0a, 0x45, 0xf6, 0x1b, 0xf8, 0x09, 0x22, 0x18, 0x70, 0x11, 0x45, 0x49, 0x05, 0x73, 0xcf,
	0xb9, 0xdf, 0x99, 0xb9, 0xba, 0x78, 0x2c, 0x8b, 0x85, 0x2c, 0x44, 0xc1, 0x38, 0x64, 0xac, 0x9a,
	0x45, 0x50, 0x86, 0x33, 0x06, 0x79, 0x45, 0xd5, 0x52, 0x96, 0xd2, 0xfe, 0xd6, 0xc9, 0x94, 0x43,
	0x46, 0x3b, 0x79, 0xf4, 0x83, 0xb7, 0xd5, 0xeb, 0xd6, 0xc2, 0xf4, 0x41, 0xfb, 0x47, 0xc3, 0x44,
	0x26, 0x52, 0xd7, 0x9b, 0xbf, 0xae, 0x4a, 0xb4, 0x87, 0x85, 0xab, 0x32, 0x3d, 0x85, 0x34, 0x87,
	0x67, 0x7a, 0x14, 0x16, 0x70, 0xd2, 0xb9, 0x14, 0x79, 0xa7, 0xff, 0x4c, 0xa4, 0x4c, 0x32, 0x60,
	0xa1, 0x12, 0x0c, 0xd6, 0x6a, 0xc9, 0xaa, 0x59, 0x98, 0xa9, 0xb4, 0x31, 0xa5, 0xc0, 0x6f, 0x21,
	0xd6, 0x3e, 0xef, 0x1e, 0xe1, 0x77, 0xe7, 0x22, 0x8f, 0xed, 0x31, 0x36, 0x45, 0xec, 0xa0, 0x09,
	0x9a, 0x0e, 0xfc, 0x2f, 0xc7, 0xda, 0x1d, 0x6c, 0xc2, 0x45, 0xf6, 0xd7, 0x13, 0xb1, 0x17, 0x98,
	0x22, 0xb6, 0x2f, 0xf0, 0xc7, 0x72, 0xa3, 0x20, 0x86, 0x1b, 0xc7, 0x9c, 0xa0, 0xe9, 0xa7, 0xdf,
	0x84, 0xea, 0x04, 0x1a, 0x2a, 0x41, 0x9b, 0x04, 0xda, 0x27, 0xd0, 0xcb, 0x8d, 0x02, 0xff, 0xfb,
	0xb6, 0x76, 0x8d, 0x63, 0xed, 0x7e, 0xd5, 0x9c, 0xae, 0xd9, 0x0b, 0x7a, 0x8c, 0xfd, 0x0f, 0x5b,
	0x90, 0x57, 0x8e, 0xd5, 0xd2, 0x1c, 0xfa, 0xc2, 0xd4, 0xe8, 0x3c, 0xaf, 0x7c, 0xbb, 0xe3, 0x60,
	0xcd, 0x81, 0xbc, 0xf2, 0x82, 0xa6, 0xd1, 0x53, 0xd8, 0x9a, 0xe7, 0xd5, 0x5b, 0xf7, 0x3e, 0xc3,
	0xef, 0x63, 0xe0, 0x59, 0xe1, 0x98, 0x13, 0xeb, 0xf5, 0x5b, 0xff, 0x07, 0x9e, 0xf9, 0xc3, 0x6d,
	0xed, 0xa2, 0x63, 0xed, 0x7e, 0xd6, 0x94, 0xb6, 0xd5, 0x0b, 0x34, 0xc2, 0xf7, 0xb7, 0x7b, 0x82,
	0x76, 0x7b, 0x82, 0x1e, 0xf7, 0x04, 0xdd, 0x1d, 0x88, 0xb1, 0x3b, 0x10, 0xe3, 0xe1, 0x40, 0x8c,
	0xab, 0x69, 0x22, 0xca, 0x74, 0x15, 0x51, 0x2e, 0x17, 0x8c, 0xff, 0xea, 0xf7, 0xa3, 0xff, 0xae,
	0xdb, 0x4d, 0x69, 0xde, 0x5d, 0x44, 0x1f, 0xda, 0xb1, 0xff, 0x79, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x75, 0x43, 0x9f, 0x0c, 0x45, 0x02, 0x00, 0x00,
}

func (m *Kind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kind) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kind) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Env.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Typedef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEnv(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Env) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Env) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Env) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decls) > 0 {
		for iNdEx := len(m.Decls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Decls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEnv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEnv(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnv(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Kind) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEnv(uint64(l))
	}
	l = m.Typedef.Size()
	n += 1 + l + sovEnv(uint64(l))
	l = m.Env.Size()
	n += 1 + l + sovEnv(uint64(l))
	return n
}

func (m *Env) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEnv(uint64(l))
	}
	if len(m.Decls) > 0 {
		for _, e := range m.Decls {
			l = e.Size()
			n += 1 + l + sovEnv(uint64(l))
		}
	}
	return n
}

func sovEnv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnv(x uint64) (n int) {
	return sovEnv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Kind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typedef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Typedef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Env.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Env) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Env: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Env: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decls = append(m.Decls, &v1alpha1.Decl{})
			if err := m.Decls[len(m.Decls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnv = fmt.Errorf("proto: unexpected end of group")
)
