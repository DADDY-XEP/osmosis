// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/cel/v1beta1/example_cell.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExampleCell struct {
	Name   string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Number uint32                                   `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Coins  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *ExampleCell) Reset()         { *m = ExampleCell{} }
func (m *ExampleCell) String() string { return proto.CompactTextString(m) }
func (*ExampleCell) ProtoMessage()    {}
func (*ExampleCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_450f25e6d03cd592, []int{0}
}
func (m *ExampleCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExampleCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExampleCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExampleCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleCell.Merge(m, src)
}
func (m *ExampleCell) XXX_Size() int {
	return m.Size()
}
func (m *ExampleCell) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleCell.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleCell proto.InternalMessageInfo

func (m *ExampleCell) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExampleCell) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ExampleCell) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterType((*ExampleCell)(nil), "osmosis.cel.v1beta1.ExampleCell")
}

func init() {
	proto.RegisterFile("osmosis/cel/v1beta1/example_cell.proto", fileDescriptor_450f25e6d03cd592)
}

var fileDescriptor_450f25e6d03cd592 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbf, 0x4e, 0x3a, 0x41,
	0x10, 0xc7, 0x6f, 0x7f, 0xfc, 0x20, 0xe1, 0x88, 0xcd, 0x69, 0x0c, 0x50, 0x2c, 0xc4, 0x82, 0x5c,
	0xc3, 0xae, 0x68, 0x67, 0x09, 0xb1, 0xb0, 0xa5, 0xb4, 0x21, 0x7b, 0xcb, 0xe4, 0xee, 0xc2, 0xde,
	0xed, 0x86, 0x3d, 0x08, 0xbe, 0x85, 0x6f, 0x61, 0x62, 0xed, 0x43, 0x50, 0x12, 0x2b, 0x2b, 0x35,
	0xf0, 0x22, 0x66, 0xff, 0x40, 0xa2, 0xd5, 0xfc, 0xfb, 0xec, 0xcc, 0x7c, 0x77, 0xc2, 0x81, 0xd4,
	0x85, 0xd4, 0xb9, 0xa6, 0x1c, 0x04, 0x5d, 0x8f, 0x12, 0xa8, 0xd8, 0x88, 0xc2, 0x86, 0x15, 0x4a,
	0xc0, 0x8c, 0x83, 0x10, 0x44, 0x2d, 0x65, 0x25, 0xa3, 0x73, 0xcf, 0x11, 0x0e, 0x82, 0x78, 0xae,
	0xdb, 0xe1, 0x36, 0x3b, 0xb3, 0x08, 0x75, 0x81, 0xe3, 0xbb, 0x17, 0xa9, 0x4c, 0xa5, 0xcb, 0x1b,
	0xcf, 0x67, 0xb1, 0x63, 0x28, 0x5b, 0x55, 0xd9, 0x69, 0x9a, 0x09, 0xfe, 0xd4, 0x13, 0xa6, 0xe1,
	0x54, 0xe7, 0x32, 0x2f, 0x7d, 0x7d, 0x90, 0x4a, 0x99, 0x0a, 0xa0, 0x4c, 0xe5, 0x14, 0x36, 0x6a,
	0x49, 0xd7, 0x23, 0x26, 0x54, 0x66, 0xa0, 0x0c, 0xf8, 0x02, 0xe6, 0x8e, 0xbb, 0x7a, 0x41, 0x61,
	0xeb, 0xde, 0x89, 0x98, 0x80, 0x10, 0x51, 0x14, 0xfe, 0x2f, 0x59, 0x01, 0x6d, 0xd4, 0x47, 0x71,
	0x73, 0x6a, 0xfd, 0xe8, 0x32, 0x6c, 0x94, 0xab, 0x22, 0x81, 0x65, 0xfb, 0x5f, 0x1f, 0xc5, 0x67,
	0x53, 0x1f, 0x45, 0x2c, 0xac, 0x9b, 0x89, 0xba, 0x5d, 0xeb, 0xd7, 0xe2, 0xd6, 0x4d, 0x87, 0x78,
	0x5d, 0x66, 0xa7, 0xa3, 0x72, 0x32, 0x91, 0x79, 0x39, 0xbe, 0xde, 0x7e, 0xf6, 0x82, 0xd7, 0xaf,
	0x5e, 0x9c, 0xe6, 0x55, 0xb6, 0x4a, 0x08, 0x97, 0x85, 0xff, 0x04, 0x6f, 0x86, 0x7a, 0xbe, 0xa0,
	0xd5, 0x93, 0x02, 0x6d, 0x1f, 0xe8, 0xa9, 0xeb, 0x7c, 0xd7, 0x7c, 0x7f, 0x1b, 0xd6, 0xcd, 0x62,
	0x0f, 0xe3, 0xf1, 0x76, 0x8f, 0xd1, 0x6e, 0x8f, 0xd1, 0xf7, 0x1e, 0xa3, 0xe7, 0x03, 0x0e, 0x76,
	0x07, 0x1c, 0x7c, 0x1c, 0x70, 0xf0, 0xf8, 0xab, 0xeb, 0xf0, 0x78, 0xa6, 0xa3, 0xdd, 0xd8, 0x83,
	0xd9, 0xde, 0x49, 0xc3, 0x8a, 0xbe, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x2d, 0x71, 0xa1,
	0xcc, 0x01, 0x00, 0x00,
}

func (m *ExampleCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExampleCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExampleCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExampleCell(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Number != 0 {
		i = encodeVarintExampleCell(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExampleCell(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExampleCell(dAtA []byte, offset int, v uint64) int {
	offset -= sovExampleCell(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExampleCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExampleCell(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovExampleCell(uint64(m.Number))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovExampleCell(uint64(l))
		}
	}
	return n
}

func sovExampleCell(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExampleCell(x uint64) (n int) {
	return sovExampleCell(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExampleCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExampleCell
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExampleCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExampleCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleCell
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExampleCell
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExampleCell
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleCell
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleCell
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleCell
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExampleCell
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExampleCell(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExampleCell
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExampleCell
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExampleCell(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExampleCell
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExampleCell
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExampleCell
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExampleCell
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExampleCell
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExampleCell
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExampleCell        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExampleCell          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExampleCell = fmt.Errorf("proto: unexpected end of group")
)
