// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/cel/v1beta1/expr.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Cell struct {
	Id    string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	State *types.Any `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9247799e58e4d68, []int{0}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cell) GetState() *types.Any {
	if m != nil {
		return m.State
	}
	return nil
}

type Expr struct {
	Expr   string           `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Inputs []*v1alpha1.Decl `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Output *v1alpha1.Type   `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Expr) Reset()         { *m = Expr{} }
func (m *Expr) String() string { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()    {}
func (*Expr) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9247799e58e4d68, []int{1}
}
func (m *Expr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expr.Merge(m, src)
}
func (m *Expr) XXX_Size() int {
	return m.Size()
}
func (m *Expr) XXX_DiscardUnknown() {
	xxx_messageInfo_Expr.DiscardUnknown(m)
}

var xxx_messageInfo_Expr proto.InternalMessageInfo

func (m *Expr) GetExpr() string {
	if m != nil {
		return m.Expr
	}
	return ""
}

func (m *Expr) GetInputs() []*v1alpha1.Decl {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Expr) GetOutput() *v1alpha1.Type {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*Cell)(nil), "osmosis.cel.v1beta1.Cell")
	proto.RegisterType((*Expr)(nil), "osmosis.cel.v1beta1.Expr")
}

func init() { proto.RegisterFile("osmosis/cel/v1beta1/expr.proto", fileDescriptor_f9247799e58e4d68) }

var fileDescriptor_f9247799e58e4d68 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xbf, 0x8e, 0xd3, 0x30,
	0x18, 0x6f, 0xd2, 0x52, 0xa9, 0xae, 0x60, 0x08, 0x1d, 0xd2, 0x4a, 0x98, 0x2a, 0x03, 0xca, 0x52,
	0x5b, 0x2d, 0x12, 0x43, 0x37, 0x02, 0x0c, 0xac, 0x81, 0x89, 0x05, 0x39, 0x8e, 0x49, 0x2c, 0xdc,
	0xd8, 0x6a, 0x9c, 0xaa, 0x79, 0x05, 0x26, 0x1e, 0x86, 0x87, 0x40, 0x37, 0x75, 0xbc, 0xe9, 0x74,
	0x6a, 0xdf, 0xe0, 0x9e, 0xe0, 0x14, 0xdb, 0xe9, 0x70, 0xc3, 0x4d, 0xfe, 0xbe, 0xef, 0xf7, 0xc7,
	0x3f, 0xff, 0x01, 0x50, 0xd6, 0x3b, 0x59, 0xf3, 0x1a, 0x53, 0x26, 0xf0, 0x61, 0x9d, 0x31, 0x4d,
	0xd6, 0x98, 0x1d, 0xd5, 0x1e, 0xa9, 0xbd, 0xd4, 0x32, 0x78, 0xed, 0x70, 0x44, 0x99, 0x40, 0x0e,
	0x5f, 0xcc, 0xa9, 0x99, 0xfe, 0x34, 0x14, 0x6c, 0x1b, 0xcb, 0x5f, 0xcc, 0x0a, 0x59, 0x48, 0x3b,
	0xef, 0x2a, 0x37, 0x9d, 0x17, 0x52, 0x16, 0x82, 0x61, 0xd3, 0x65, 0xcd, 0x2f, 0x4c, 0xaa, 0xd6,
	0x41, 0xd0, 0xca, 0x31, 0x69, 0x74, 0x79, 0x0d, 0xd0, 0x35, 0x4f, 0xf0, 0x8c, 0xd4, 0xec, 0x8a,
	0x53, 0xc9, 0x2b, 0x87, 0xbf, 0x73, 0xd6, 0x44, 0x71, 0x93, 0x1b, 0x1f, 0xd6, 0x44, 0xa8, 0xb2,
	0x23, 0x95, 0x8c, 0xfe, 0x66, 0xb9, 0xe5, 0x45, 0x04, 0x8c, 0x3e, 0x31, 0x21, 0x82, 0x37, 0xc0,
	0xe7, 0x79, 0xe8, 0x2d, 0xbd, 0x78, 0x92, 0xbc, 0x7c, 0xb8, 0x7b, 0x3b, 0x69, 0xc9, 0x4e, 0x6c,
	0x23, 0x9e, 0x47, 0xa9, 0xcf, 0xf3, 0x60, 0x0b, 0x5e, 0xd4, 0x9a, 0x68, 0x16, 0xfa, 0x4b, 0x2f,
	0x9e, 0x6e, 0x66, 0xc8, 0xda, 0xa3, 0x3e, 0x39, 0xfa, 0x58, 0xb5, 0xc9, 0xab, 0x9b, 0x7f, 0x2b,
	0xd0, 0xb9, 0x7d, 0xeb, 0xa8, 0x5f, 0x53, 0x2b, 0x89, 0xfe, 0x78, 0x60, 0xf4, 0xe5, 0xa8, 0xf6,
	0x41, 0x00, 0x46, 0x5d, 0x14, 0xbb, 0x4b, 0x6a, 0xea, 0xe0, 0x03, 0x18, 0xf3, 0x4a, 0x35, 0xba,
	0x0e, 0xfd, 0xe5, 0x30, 0x9e, 0x6e, 0x60, 0xef, 0x4c, 0x14, 0x47, 0xe6, 0xc2, 0xfb, 0xe0, 0xe8,
	0x33, 0xa3, 0x22, 0x75, 0xec, 0x4e, 0x27, 0x1b, 0xad, 0x1a, 0x1d, 0x0e, 0x4d, 0xa2, 0x67, 0x74,
	0xdf, 0x5b, 0xc5, 0x52, 0xc7, 0x4e, 0x92, 0xff, 0x67, 0xe8, 0x9d, 0xce, 0xd0, 0xbb, 0x3f, 0x43,
	0xef, 0xef, 0x05, 0x0e, 0x4e, 0x17, 0x38, 0xb8, 0xbd, 0xc0, 0xc1, 0x8f, 0xb8, 0xe0, 0xba, 0x6c,
	0x32, 0x44, 0xe5, 0x0e, 0xd3, 0x55, 0xff, 0xfe, 0xfd, 0x7a, 0x34, 0x3f, 0x41, 0xb7, 0x8a, 0xd5,
	0xd9, 0xd8, 0x9c, 0xfa, 0xfd, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72, 0x52, 0x7f, 0x5a, 0x25,
	0x02, 0x00, 0x00,
}

func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintExpr(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExpr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Expr) > 0 {
		i -= len(m.Expr)
		copy(dAtA[i:], m.Expr)
		i = encodeVarintExpr(dAtA, i, uint64(len(m.Expr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpr(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExpr(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovExpr(uint64(l))
	}
	return n
}

func (m *Expr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovExpr(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovExpr(uint64(l))
		}
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovExpr(uint64(l))
	}
	return n
}

func sovExpr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpr(x uint64) (n int) {
	return sovExpr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &types.Any{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &v1alpha1.Decl{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &v1alpha1.Type{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpr = fmt.Errorf("proto: unexpected end of group")
)
