// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/lockup/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ModuleBalanceRequest struct {
}

func (m *ModuleBalanceRequest) Reset()         { *m = ModuleBalanceRequest{} }
func (m *ModuleBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*ModuleBalanceRequest) ProtoMessage()    {}
func (*ModuleBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{0}
}
func (m *ModuleBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalanceRequest.Merge(m, src)
}
func (m *ModuleBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalanceRequest proto.InternalMessageInfo

type ModuleBalanceResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *ModuleBalanceResponse) Reset()         { *m = ModuleBalanceResponse{} }
func (m *ModuleBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*ModuleBalanceResponse) ProtoMessage()    {}
func (*ModuleBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{1}
}
func (m *ModuleBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalanceResponse.Merge(m, src)
}
func (m *ModuleBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalanceResponse proto.InternalMessageInfo

func (m *ModuleBalanceResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type ModuleLockedAmountRequest struct {
}

func (m *ModuleLockedAmountRequest) Reset()         { *m = ModuleLockedAmountRequest{} }
func (m *ModuleLockedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*ModuleLockedAmountRequest) ProtoMessage()    {}
func (*ModuleLockedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{2}
}
func (m *ModuleLockedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleLockedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleLockedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleLockedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleLockedAmountRequest.Merge(m, src)
}
func (m *ModuleLockedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModuleLockedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleLockedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleLockedAmountRequest proto.InternalMessageInfo

type ModuleLockedAmountResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *ModuleLockedAmountResponse) Reset()         { *m = ModuleLockedAmountResponse{} }
func (m *ModuleLockedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*ModuleLockedAmountResponse) ProtoMessage()    {}
func (*ModuleLockedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{3}
}
func (m *ModuleLockedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleLockedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleLockedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleLockedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleLockedAmountResponse.Merge(m, src)
}
func (m *ModuleLockedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *ModuleLockedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleLockedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleLockedAmountResponse proto.InternalMessageInfo

func (m *ModuleLockedAmountResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type AccountUnlockableCoinsRequest struct {
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
}

func (m *AccountUnlockableCoinsRequest) Reset()         { *m = AccountUnlockableCoinsRequest{} }
func (m *AccountUnlockableCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockableCoinsRequest) ProtoMessage()    {}
func (*AccountUnlockableCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{4}
}
func (m *AccountUnlockableCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockableCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockableCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockableCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockableCoinsRequest.Merge(m, src)
}
func (m *AccountUnlockableCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockableCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockableCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockableCoinsRequest proto.InternalMessageInfo

func (m *AccountUnlockableCoinsRequest) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

type AccountUnlockableCoinsResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *AccountUnlockableCoinsResponse) Reset()         { *m = AccountUnlockableCoinsResponse{} }
func (m *AccountUnlockableCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockableCoinsResponse) ProtoMessage()    {}
func (*AccountUnlockableCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{5}
}
func (m *AccountUnlockableCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockableCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockableCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockableCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockableCoinsResponse.Merge(m, src)
}
func (m *AccountUnlockableCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockableCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockableCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockableCoinsResponse proto.InternalMessageInfo

func (m *AccountUnlockableCoinsResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type AccountLockedCoinsRequest struct {
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
}

func (m *AccountLockedCoinsRequest) Reset()         { *m = AccountLockedCoinsRequest{} }
func (m *AccountLockedCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedCoinsRequest) ProtoMessage()    {}
func (*AccountLockedCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{6}
}
func (m *AccountLockedCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedCoinsRequest.Merge(m, src)
}
func (m *AccountLockedCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedCoinsRequest proto.InternalMessageInfo

func (m *AccountLockedCoinsRequest) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

type AccountLockedCoinsResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *AccountLockedCoinsResponse) Reset()         { *m = AccountLockedCoinsResponse{} }
func (m *AccountLockedCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedCoinsResponse) ProtoMessage()    {}
func (*AccountLockedCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{7}
}
func (m *AccountLockedCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedCoinsResponse.Merge(m, src)
}
func (m *AccountLockedCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedCoinsResponse proto.InternalMessageInfo

func (m *AccountLockedCoinsResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type AccountLockedPastTimeRequest struct {
	Owner     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Timestamp time.Time                                     `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
}

func (m *AccountLockedPastTimeRequest) Reset()         { *m = AccountLockedPastTimeRequest{} }
func (m *AccountLockedPastTimeRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeRequest) ProtoMessage()    {}
func (*AccountLockedPastTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{8}
}
func (m *AccountLockedPastTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeRequest.Merge(m, src)
}
func (m *AccountLockedPastTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeRequest proto.InternalMessageInfo

func (m *AccountLockedPastTimeRequest) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AccountLockedPastTimeRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type AccountLockedPastTimeResponse struct {
	Locks []*PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (m *AccountLockedPastTimeResponse) Reset()         { *m = AccountLockedPastTimeResponse{} }
func (m *AccountLockedPastTimeResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeResponse) ProtoMessage()    {}
func (*AccountLockedPastTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{9}
}
func (m *AccountLockedPastTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeResponse.Merge(m, src)
}
func (m *AccountLockedPastTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeResponse proto.InternalMessageInfo

func (m *AccountLockedPastTimeResponse) GetLocks() []*PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountUnlockedBeforeTimeRequest struct {
	Owner     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Timestamp time.Time                                     `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
}

func (m *AccountUnlockedBeforeTimeRequest) Reset()         { *m = AccountUnlockedBeforeTimeRequest{} }
func (m *AccountUnlockedBeforeTimeRequest) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockedBeforeTimeRequest) ProtoMessage()    {}
func (*AccountUnlockedBeforeTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{10}
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockedBeforeTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockedBeforeTimeRequest.Merge(m, src)
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockedBeforeTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockedBeforeTimeRequest proto.InternalMessageInfo

func (m *AccountUnlockedBeforeTimeRequest) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AccountUnlockedBeforeTimeRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type AccountUnlockedBeforeTimeResponse struct {
	Locks []*PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (m *AccountUnlockedBeforeTimeResponse) Reset()         { *m = AccountUnlockedBeforeTimeResponse{} }
func (m *AccountUnlockedBeforeTimeResponse) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockedBeforeTimeResponse) ProtoMessage()    {}
func (*AccountUnlockedBeforeTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{11}
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockedBeforeTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockedBeforeTimeResponse.Merge(m, src)
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockedBeforeTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockedBeforeTimeResponse proto.InternalMessageInfo

func (m *AccountUnlockedBeforeTimeResponse) GetLocks() []*PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountLockedPastTimeDenomRequest struct {
	Owner     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Timestamp time.Time                                     `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
	Denom     string                                        `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *AccountLockedPastTimeDenomRequest) Reset()         { *m = AccountLockedPastTimeDenomRequest{} }
func (m *AccountLockedPastTimeDenomRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeDenomRequest) ProtoMessage()    {}
func (*AccountLockedPastTimeDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{12}
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeDenomRequest.Merge(m, src)
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeDenomRequest proto.InternalMessageInfo

func (m *AccountLockedPastTimeDenomRequest) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AccountLockedPastTimeDenomRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *AccountLockedPastTimeDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type AccountLockedPastTimeDenomResponse struct {
	Locks []*PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (m *AccountLockedPastTimeDenomResponse) Reset()         { *m = AccountLockedPastTimeDenomResponse{} }
func (m *AccountLockedPastTimeDenomResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeDenomResponse) ProtoMessage()    {}
func (*AccountLockedPastTimeDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{13}
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeDenomResponse.Merge(m, src)
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeDenomResponse proto.InternalMessageInfo

func (m *AccountLockedPastTimeDenomResponse) GetLocks() []*PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type LockRequest struct {
	LockId uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *LockRequest) Reset()         { *m = LockRequest{} }
func (m *LockRequest) String() string { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()    {}
func (*LockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{14}
}
func (m *LockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockRequest.Merge(m, src)
}
func (m *LockRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockRequest proto.InternalMessageInfo

func (m *LockRequest) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

type LockResponse struct {
	Lock *PeriodLock `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *LockResponse) Reset()         { *m = LockResponse{} }
func (m *LockResponse) String() string { return proto.CompactTextString(m) }
func (*LockResponse) ProtoMessage()    {}
func (*LockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{15}
}
func (m *LockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockResponse.Merge(m, src)
}
func (m *LockResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockResponse proto.InternalMessageInfo

func (m *LockResponse) GetLock() *PeriodLock {
	if m != nil {
		return m.Lock
	}
	return nil
}

type AccountLockedLongerDurationRequest struct {
	Owner    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Duration time.Time                                     `protobuf:"bytes,2,opt,name=duration,proto3,stdtime" json:"duration" yaml:"duration"`
}

func (m *AccountLockedLongerDurationRequest) Reset()         { *m = AccountLockedLongerDurationRequest{} }
func (m *AccountLockedLongerDurationRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationRequest) ProtoMessage()    {}
func (*AccountLockedLongerDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{16}
}
func (m *AccountLockedLongerDurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationRequest.Merge(m, src)
}
func (m *AccountLockedLongerDurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationRequest proto.InternalMessageInfo

func (m *AccountLockedLongerDurationRequest) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AccountLockedLongerDurationRequest) GetDuration() time.Time {
	if m != nil {
		return m.Duration
	}
	return time.Time{}
}

type AccountLockedLongerDurationResponse struct {
	Locks []*PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (m *AccountLockedLongerDurationResponse) Reset()         { *m = AccountLockedLongerDurationResponse{} }
func (m *AccountLockedLongerDurationResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationResponse) ProtoMessage()    {}
func (*AccountLockedLongerDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{17}
}
func (m *AccountLockedLongerDurationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationResponse.Merge(m, src)
}
func (m *AccountLockedLongerDurationResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationResponse proto.InternalMessageInfo

func (m *AccountLockedLongerDurationResponse) GetLocks() []*PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountLockedLongerDurationDenomRequest struct {
	Owner    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Duration time.Time                                     `protobuf:"bytes,2,opt,name=duration,proto3,stdtime" json:"duration" yaml:"duration"`
	Denom    string                                        `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *AccountLockedLongerDurationDenomRequest) Reset() {
	*m = AccountLockedLongerDurationDenomRequest{}
}
func (m *AccountLockedLongerDurationDenomRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationDenomRequest) ProtoMessage()    {}
func (*AccountLockedLongerDurationDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{18}
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationDenomRequest.Merge(m, src)
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationDenomRequest proto.InternalMessageInfo

func (m *AccountLockedLongerDurationDenomRequest) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AccountLockedLongerDurationDenomRequest) GetDuration() time.Time {
	if m != nil {
		return m.Duration
	}
	return time.Time{}
}

func (m *AccountLockedLongerDurationDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type AccountLockedLongerDurationDenomResponse struct {
	Locks []*PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (m *AccountLockedLongerDurationDenomResponse) Reset() {
	*m = AccountLockedLongerDurationDenomResponse{}
}
func (m *AccountLockedLongerDurationDenomResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationDenomResponse) ProtoMessage()    {}
func (*AccountLockedLongerDurationDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e906fda01cffd91a, []int{19}
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationDenomResponse.Merge(m, src)
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationDenomResponse proto.InternalMessageInfo

func (m *AccountLockedLongerDurationDenomResponse) GetLocks() []*PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

func init() {
	proto.RegisterType((*ModuleBalanceRequest)(nil), "osmosis.lockup.ModuleBalanceRequest")
	proto.RegisterType((*ModuleBalanceResponse)(nil), "osmosis.lockup.ModuleBalanceResponse")
	proto.RegisterType((*ModuleLockedAmountRequest)(nil), "osmosis.lockup.ModuleLockedAmountRequest")
	proto.RegisterType((*ModuleLockedAmountResponse)(nil), "osmosis.lockup.ModuleLockedAmountResponse")
	proto.RegisterType((*AccountUnlockableCoinsRequest)(nil), "osmosis.lockup.AccountUnlockableCoinsRequest")
	proto.RegisterType((*AccountUnlockableCoinsResponse)(nil), "osmosis.lockup.AccountUnlockableCoinsResponse")
	proto.RegisterType((*AccountLockedCoinsRequest)(nil), "osmosis.lockup.AccountLockedCoinsRequest")
	proto.RegisterType((*AccountLockedCoinsResponse)(nil), "osmosis.lockup.AccountLockedCoinsResponse")
	proto.RegisterType((*AccountLockedPastTimeRequest)(nil), "osmosis.lockup.AccountLockedPastTimeRequest")
	proto.RegisterType((*AccountLockedPastTimeResponse)(nil), "osmosis.lockup.AccountLockedPastTimeResponse")
	proto.RegisterType((*AccountUnlockedBeforeTimeRequest)(nil), "osmosis.lockup.AccountUnlockedBeforeTimeRequest")
	proto.RegisterType((*AccountUnlockedBeforeTimeResponse)(nil), "osmosis.lockup.AccountUnlockedBeforeTimeResponse")
	proto.RegisterType((*AccountLockedPastTimeDenomRequest)(nil), "osmosis.lockup.AccountLockedPastTimeDenomRequest")
	proto.RegisterType((*AccountLockedPastTimeDenomResponse)(nil), "osmosis.lockup.AccountLockedPastTimeDenomResponse")
	proto.RegisterType((*LockRequest)(nil), "osmosis.lockup.LockRequest")
	proto.RegisterType((*LockResponse)(nil), "osmosis.lockup.LockResponse")
	proto.RegisterType((*AccountLockedLongerDurationRequest)(nil), "osmosis.lockup.AccountLockedLongerDurationRequest")
	proto.RegisterType((*AccountLockedLongerDurationResponse)(nil), "osmosis.lockup.AccountLockedLongerDurationResponse")
	proto.RegisterType((*AccountLockedLongerDurationDenomRequest)(nil), "osmosis.lockup.AccountLockedLongerDurationDenomRequest")
	proto.RegisterType((*AccountLockedLongerDurationDenomResponse)(nil), "osmosis.lockup.AccountLockedLongerDurationDenomResponse")
}

func init() { proto.RegisterFile("osmosis/lockup/query.proto", fileDescriptor_e906fda01cffd91a) }

var fileDescriptor_e906fda01cffd91a = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcb, 0x4e, 0xf3, 0x46,
	0x14, 0xce, 0x14, 0x02, 0xe5, 0x80, 0x5a, 0x64, 0x41, 0x9b, 0x98, 0xe0, 0xa4, 0xee, 0x85, 0xf4,
	0x12, 0x9b, 0x84, 0x45, 0xab, 0x2e, 0x2a, 0x25, 0xa5, 0x8a, 0x2a, 0x51, 0x09, 0x2c, 0xa0, 0x52,
	0x55, 0x09, 0x39, 0xf6, 0x10, 0x2c, 0x62, 0x4f, 0xf0, 0xa5, 0x14, 0x36, 0x2c, 0x90, 0xba, 0xab,
	0xc4, 0x03, 0xf4, 0x09, 0xfa, 0x12, 0x15, 0xea, 0x86, 0x25, 0xcb, 0xaa, 0xaa, 0xa0, 0x82, 0x37,
	0xe8, 0xb2, 0xab, 0x5f, 0xf6, 0x8c, 0xf3, 0x27, 0x8e, 0x63, 0x92, 0x08, 0x90, 0x58, 0x39, 0xce,
	0xb9, 0x7d, 0xdf, 0x77, 0xe6, 0x72, 0x0c, 0x3c, 0x71, 0x4c, 0xe2, 0x18, 0x8e, 0xdc, 0x22, 0xda,
	0xa1, 0xd7, 0x96, 0x8f, 0x3c, 0x6c, 0x9f, 0x48, 0x6d, 0x9b, 0xb8, 0x84, 0x7b, 0x8b, 0xd9, 0x24,
	0x6a, 0xe3, 0x17, 0x9a, 0xa4, 0x49, 0x02, 0x93, 0xec, 0xff, 0xa2, 0x5e, 0xbc, 0xa0, 0x05, 0x6e,
	0x72, 0x43, 0x75, 0xb0, 0xfc, 0x53, 0xb9, 0x81, 0x5d, 0xb5, 0x2c, 0x6b, 0xc4, 0xb0, 0x98, 0x3d,
	0xdf, 0x24, 0xa4, 0xd9, 0xc2, 0x72, 0xf0, 0xd6, 0xf0, 0xf6, 0x65, 0xd7, 0x30, 0xb1, 0xe3, 0xaa,
	0x66, 0x3b, 0x4c, 0x10, 0x75, 0xd0, 0x3d, 0x5b, 0x75, 0x0d, 0x12, 0x26, 0xc8, 0x46, 0x20, 0xfa,
	0x0f, 0x6a, 0x12, 0xdf, 0x81, 0x85, 0xef, 0x88, 0xee, 0xb5, 0x70, 0x4d, 0x6d, 0xa9, 0x96, 0x86,
	0x15, 0x7c, 0xe4, 0x61, 0xc7, 0x15, 0x4f, 0x61, 0x31, 0xf2, 0xbf, 0xd3, 0x26, 0x96, 0x83, 0x39,
	0x15, 0xd2, 0x3e, 0x34, 0x27, 0x83, 0x0a, 0x13, 0xc5, 0xd9, 0x4a, 0x56, 0xa2, 0xe0, 0x25, 0x1f,
	0xbc, 0xc4, 0xc0, 0x4b, 0x5f, 0x13, 0xc3, 0xaa, 0xad, 0x5e, 0xdd, 0xe4, 0x53, 0xbf, 0xdf, 0xe6,
	0x8b, 0x4d, 0xc3, 0x3d, 0xf0, 0x1a, 0x92, 0x46, 0x4c, 0x99, 0x31, 0xa5, 0x8f, 0x92, 0xa3, 0x1f,
	0xca, 0xee, 0x49, 0x1b, 0x3b, 0x41, 0x80, 0xa3, 0xd0, 0xcc, 0xe2, 0x12, 0x64, 0x69, 0xed, 0x0d,
	0xa2, 0x1d, 0x62, 0xbd, 0x6a, 0x12, 0xcf, 0x72, 0x43, 0x60, 0x67, 0xc0, 0xc7, 0x19, 0x9f, 0x0f,
	0xdd, 0x01, 0x2c, 0x57, 0x35, 0xcd, 0xaf, 0xba, 0x63, 0xf9, 0x42, 0xaa, 0x8d, 0x16, 0xa6, 0x0e,
	0x14, 0x21, 0x57, 0x87, 0x34, 0x39, 0xb6, 0xb0, 0x9d, 0x41, 0x05, 0x54, 0x9c, 0xab, 0x95, 0xff,
	0xbf, 0xc9, 0x97, 0x86, 0x28, 0x52, 0xd5, 0xb4, 0xaa, 0xae, 0xdb, 0xd8, 0x71, 0x14, 0x1a, 0x2f,
	0x9e, 0x23, 0x10, 0x06, 0x95, 0x7a, 0x3e, 0xbe, 0x3a, 0x64, 0x19, 0x08, 0xaa, 0xf8, 0xd3, 0x70,
	0x3d, 0x03, 0x3e, 0xae, 0xca, 0xf3, 0xd1, 0xfc, 0x03, 0x41, 0xae, 0x07, 0xc1, 0xa6, 0xea, 0xb8,
	0xdb, 0x86, 0x89, 0x1f, 0x9b, 0x2a, 0xb7, 0x0b, 0x33, 0x9d, 0x0d, 0x9c, 0x79, 0xa3, 0x80, 0x8a,
	0xb3, 0x15, 0x5e, 0xa2, 0x3b, 0x58, 0x0a, 0x77, 0xb0, 0xb4, 0x1d, 0x7a, 0xd4, 0x72, 0x3e, 0xa3,
	0xff, 0x6e, 0xf2, 0xf3, 0x27, 0xaa, 0xd9, 0xfa, 0x52, 0xec, 0x84, 0x8a, 0x17, 0xb7, 0x79, 0xa4,
	0xbc, 0x4e, 0x25, 0x6e, 0x75, 0x16, 0x66, 0x94, 0x00, 0x53, 0x71, 0x15, 0xd2, 0xfe, 0x2a, 0x0a,
	0x55, 0xe4, 0xa5, 0xde, 0xd3, 0x49, 0xda, 0xc4, 0xb6, 0x41, 0x74, 0x3f, 0x58, 0xa1, 0x8e, 0xe2,
	0x9f, 0x08, 0x0a, 0x3d, 0x2b, 0x10, 0xeb, 0x35, 0xbc, 0x4f, 0x6c, 0xfc, 0xa2, 0x84, 0xd9, 0x81,
	0xf7, 0x12, 0x48, 0x8c, 0x2d, 0xce, 0xdf, 0xa8, 0x93, 0xb7, 0x57, 0xf0, 0x75, 0x6c, 0x11, 0xf3,
	0xa5, 0xa8, 0xc3, 0x2d, 0x40, 0x5a, 0xf7, 0x01, 0x67, 0x26, 0x0a, 0xa8, 0x38, 0xa3, 0xd0, 0x17,
	0x71, 0x17, 0xc4, 0x24, 0x6e, 0x63, 0x8b, 0xf6, 0x11, 0xcc, 0x06, 0xaf, 0x4c, 0x9d, 0x77, 0x61,
	0xda, 0xff, 0x7f, 0xcf, 0xd0, 0x03, 0x7d, 0x26, 0x95, 0x29, 0xff, 0xf5, 0x5b, 0x5d, 0xfc, 0x0a,
	0xe6, 0xa8, 0x1f, 0xab, 0x24, 0xc1, 0xa4, 0x6f, 0x09, 0xbc, 0x92, 0x0b, 0x05, 0x7e, 0xe2, 0x25,
	0x8a, 0x10, 0xd8, 0x20, 0x56, 0x13, 0xdb, 0xeb, 0xec, 0x62, 0x7c, 0xf4, 0xee, 0x28, 0xf0, 0x66,
	0x78, 0xe9, 0xb2, 0xe6, 0x64, 0xfb, 0x9a, 0x13, 0x16, 0xaf, 0x2d, 0xb1, 0xde, 0xbc, 0x4d, 0x7b,
	0x13, 0x06, 0xd2, 0xd6, 0x74, 0xf2, 0x88, 0xdf, 0xc3, 0xfb, 0x89, 0x14, 0xc6, 0x6e, 0xc2, 0x3f,
	0x08, 0x56, 0x12, 0x32, 0x3f, 0xcd, 0xfa, 0x7d, 0x02, 0x85, 0x06, 0xac, 0xdd, 0x1f, 0xa1, 0xf8,
	0x30, 0xbb, 0x71, 0xc5, 0xab, 0x5c, 0xce, 0x40, 0x7a, 0xcb, 0x9f, 0xf1, 0xb8, 0x3d, 0x98, 0xaf,
	0x63, 0xb7, 0x67, 0x4c, 0xe2, 0x3e, 0x88, 0x26, 0x88, 0x9b, 0xae, 0xf8, 0x0f, 0x1f, 0xf0, 0x62,
	0xe0, 0x2c, 0x58, 0xec, 0x14, 0xe8, 0x1e, 0x77, 0xb8, 0x8f, 0xe3, 0xe3, 0x63, 0xe6, 0x25, 0xfe,
	0x93, 0x61, 0x5c, 0x59, 0xbd, 0x53, 0xc8, 0xd6, 0xb1, 0x1b, 0x3f, 0x72, 0x70, 0xa5, 0x68, 0xa2,
	0xc4, 0x29, 0x88, 0x97, 0x86, 0x75, 0xef, 0xe1, 0xda, 0x3f, 0x03, 0xf4, 0x73, 0x1d, 0x38, 0x8d,
	0xf4, 0x73, 0x4d, 0x18, 0x29, 0x8e, 0x21, 0x13, 0xad, 0x17, 0x9e, 0x71, 0xdc, 0x67, 0x89, 0x79,
	0x22, 0x83, 0x01, 0x5f, 0x1a, 0xd2, 0x9b, 0x15, 0x3e, 0x47, 0x90, 0x8b, 0xaa, 0xdc, 0x7d, 0x23,
	0x71, 0xab, 0x89, 0xca, 0xc5, 0xdc, 0xc0, 0x7c, 0x79, 0x84, 0x08, 0x86, 0xe2, 0x17, 0x04, 0xcb,
	0x83, 0xf8, 0x07, 0x3b, 0x84, 0x2b, 0x0f, 0x45, 0xab, 0xfb, 0xac, 0xe0, 0x2b, 0xa3, 0x84, 0x30,
	0x20, 0xeb, 0x30, 0x5d, 0xc7, 0x81, 0x07, 0xb7, 0x14, 0x0d, 0xef, 0xba, 0x29, 0xf8, 0x5c, 0xbc,
	0x91, 0x65, 0xf9, 0x15, 0x81, 0x18, 0xa5, 0x43, 0xb7, 0xfd, 0xf6, 0x81, 0x6a, 0x85, 0x5b, 0x9f,
	0x4b, 0x06, 0x18, 0x7b, 0x45, 0xf0, 0x6b, 0x23, 0xc5, 0x30, 0x3c, 0xbf, 0x21, 0x58, 0x79, 0x18,
	0x0f, 0x15, 0xfa, 0xf3, 0x11, 0x0a, 0xf4, 0xc8, 0xfd, 0xc5, 0xe8, 0x81, 0x14, 0x5e, 0xed, 0x9b,
	0xab, 0x3b, 0x01, 0x5d, 0xdf, 0x09, 0xe8, 0xdf, 0x3b, 0x01, 0x5d, 0xdc, 0x0b, 0xa9, 0xeb, 0x7b,
	0x21, 0xf5, 0xd7, 0xbd, 0x90, 0xfa, 0xe1, 0xd3, 0xee, 0xb3, 0xbd, 0x14, 0x7e, 0x37, 0x86, 0xcf,
	0x9f, 0xc3, 0x2f, 0xc8, 0xe0, 0x90, 0x6f, 0x4c, 0x05, 0x07, 0xf7, 0xda, 0xab, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xfd, 0xc6, 0xaf, 0x8d, 0x03, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Return full balance of the module
	GetModuleBalance(ctx context.Context, in *ModuleBalanceRequest, opts ...grpc.CallOption) (*ModuleBalanceResponse, error)
	// Return locked balance of the module
	GetModuleLockedAmount(ctx context.Context, in *ModuleLockedAmountRequest, opts ...grpc.CallOption) (*ModuleLockedAmountResponse, error)
	// Returns whole unlockable coins which are not withdrawn yet
	GetAccountUnlockableCoins(ctx context.Context, in *AccountUnlockableCoinsRequest, opts ...grpc.CallOption) (*AccountUnlockableCoinsResponse, error)
	// Return a locked coins that can't be withdrawn
	GetAccountLockedCoins(ctx context.Context, in *AccountLockedCoinsRequest, opts ...grpc.CallOption) (*AccountLockedCoinsResponse, error)
	// Returns the total locks of an account whose unlock time is beyond timestamp
	GetAccountLockedPastTime(ctx context.Context, in *AccountLockedPastTimeRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeResponse, error)
	// Returns the total unlocks of an account whose unlock time is before timestamp
	GetAccountUnlockedBeforeTime(ctx context.Context, in *AccountUnlockedBeforeTimeRequest, opts ...grpc.CallOption) (*AccountUnlockedBeforeTimeResponse, error)
	// Same as GetAccountLockedPastTime but denom specific
	GetAccountLockedPastTimeDenom(ctx context.Context, in *AccountLockedPastTimeDenomRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeDenomResponse, error)
	// Returns the length of the initial lock time when the lock was created
	GetLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	// Returns account locked with duration longer than specified
	GetAccountLockedLongerThanDuration(ctx context.Context, in *AccountLockedLongerDurationRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationResponse, error)
	// Returns account locked with duration longer than specified with specific denom
	GetAccountLockedLongerThanDurationDenom(ctx context.Context, in *AccountLockedLongerDurationDenomRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationDenomResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetModuleBalance(ctx context.Context, in *ModuleBalanceRequest, opts ...grpc.CallOption) (*ModuleBalanceResponse, error) {
	out := new(ModuleBalanceResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetModuleBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetModuleLockedAmount(ctx context.Context, in *ModuleLockedAmountRequest, opts ...grpc.CallOption) (*ModuleLockedAmountResponse, error) {
	out := new(ModuleLockedAmountResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetModuleLockedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountUnlockableCoins(ctx context.Context, in *AccountUnlockableCoinsRequest, opts ...grpc.CallOption) (*AccountUnlockableCoinsResponse, error) {
	out := new(AccountUnlockableCoinsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetAccountUnlockableCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountLockedCoins(ctx context.Context, in *AccountLockedCoinsRequest, opts ...grpc.CallOption) (*AccountLockedCoinsResponse, error) {
	out := new(AccountLockedCoinsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetAccountLockedCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountLockedPastTime(ctx context.Context, in *AccountLockedPastTimeRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeResponse, error) {
	out := new(AccountLockedPastTimeResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetAccountLockedPastTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountUnlockedBeforeTime(ctx context.Context, in *AccountUnlockedBeforeTimeRequest, opts ...grpc.CallOption) (*AccountUnlockedBeforeTimeResponse, error) {
	out := new(AccountUnlockedBeforeTimeResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetAccountUnlockedBeforeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountLockedPastTimeDenom(ctx context.Context, in *AccountLockedPastTimeDenomRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeDenomResponse, error) {
	out := new(AccountLockedPastTimeDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetAccountLockedPastTimeDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountLockedLongerThanDuration(ctx context.Context, in *AccountLockedLongerDurationRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationResponse, error) {
	out := new(AccountLockedLongerDurationResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetAccountLockedLongerThanDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountLockedLongerThanDurationDenom(ctx context.Context, in *AccountLockedLongerDurationDenomRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationDenomResponse, error) {
	out := new(AccountLockedLongerDurationDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.lockup.Query/GetAccountLockedLongerThanDurationDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Return full balance of the module
	GetModuleBalance(context.Context, *ModuleBalanceRequest) (*ModuleBalanceResponse, error)
	// Return locked balance of the module
	GetModuleLockedAmount(context.Context, *ModuleLockedAmountRequest) (*ModuleLockedAmountResponse, error)
	// Returns whole unlockable coins which are not withdrawn yet
	GetAccountUnlockableCoins(context.Context, *AccountUnlockableCoinsRequest) (*AccountUnlockableCoinsResponse, error)
	// Return a locked coins that can't be withdrawn
	GetAccountLockedCoins(context.Context, *AccountLockedCoinsRequest) (*AccountLockedCoinsResponse, error)
	// Returns the total locks of an account whose unlock time is beyond timestamp
	GetAccountLockedPastTime(context.Context, *AccountLockedPastTimeRequest) (*AccountLockedPastTimeResponse, error)
	// Returns the total unlocks of an account whose unlock time is before timestamp
	GetAccountUnlockedBeforeTime(context.Context, *AccountUnlockedBeforeTimeRequest) (*AccountUnlockedBeforeTimeResponse, error)
	// Same as GetAccountLockedPastTime but denom specific
	GetAccountLockedPastTimeDenom(context.Context, *AccountLockedPastTimeDenomRequest) (*AccountLockedPastTimeDenomResponse, error)
	// Returns the length of the initial lock time when the lock was created
	GetLock(context.Context, *LockRequest) (*LockResponse, error)
	// Returns account locked with duration longer than specified
	GetAccountLockedLongerThanDuration(context.Context, *AccountLockedLongerDurationRequest) (*AccountLockedLongerDurationResponse, error)
	// Returns account locked with duration longer than specified with specific denom
	GetAccountLockedLongerThanDurationDenom(context.Context, *AccountLockedLongerDurationDenomRequest) (*AccountLockedLongerDurationDenomResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetModuleBalance(ctx context.Context, req *ModuleBalanceRequest) (*ModuleBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleBalance not implemented")
}
func (*UnimplementedQueryServer) GetModuleLockedAmount(ctx context.Context, req *ModuleLockedAmountRequest) (*ModuleLockedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleLockedAmount not implemented")
}
func (*UnimplementedQueryServer) GetAccountUnlockableCoins(ctx context.Context, req *AccountUnlockableCoinsRequest) (*AccountUnlockableCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUnlockableCoins not implemented")
}
func (*UnimplementedQueryServer) GetAccountLockedCoins(ctx context.Context, req *AccountLockedCoinsRequest) (*AccountLockedCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountLockedCoins not implemented")
}
func (*UnimplementedQueryServer) GetAccountLockedPastTime(ctx context.Context, req *AccountLockedPastTimeRequest) (*AccountLockedPastTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountLockedPastTime not implemented")
}
func (*UnimplementedQueryServer) GetAccountUnlockedBeforeTime(ctx context.Context, req *AccountUnlockedBeforeTimeRequest) (*AccountUnlockedBeforeTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUnlockedBeforeTime not implemented")
}
func (*UnimplementedQueryServer) GetAccountLockedPastTimeDenom(ctx context.Context, req *AccountLockedPastTimeDenomRequest) (*AccountLockedPastTimeDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountLockedPastTimeDenom not implemented")
}
func (*UnimplementedQueryServer) GetLock(ctx context.Context, req *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (*UnimplementedQueryServer) GetAccountLockedLongerThanDuration(ctx context.Context, req *AccountLockedLongerDurationRequest) (*AccountLockedLongerDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountLockedLongerThanDuration not implemented")
}
func (*UnimplementedQueryServer) GetAccountLockedLongerThanDurationDenom(ctx context.Context, req *AccountLockedLongerDurationDenomRequest) (*AccountLockedLongerDurationDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountLockedLongerThanDurationDenom not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetModuleBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetModuleBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetModuleBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetModuleBalance(ctx, req.(*ModuleBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetModuleLockedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleLockedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetModuleLockedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetModuleLockedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetModuleLockedAmount(ctx, req.(*ModuleLockedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountUnlockableCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUnlockableCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountUnlockableCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetAccountUnlockableCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountUnlockableCoins(ctx, req.(*AccountUnlockableCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountLockedCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountLockedCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetAccountLockedCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountLockedCoins(ctx, req.(*AccountLockedCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountLockedPastTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedPastTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountLockedPastTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetAccountLockedPastTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountLockedPastTime(ctx, req.(*AccountLockedPastTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountUnlockedBeforeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUnlockedBeforeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountUnlockedBeforeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetAccountUnlockedBeforeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountUnlockedBeforeTime(ctx, req.(*AccountUnlockedBeforeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountLockedPastTimeDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedPastTimeDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountLockedPastTimeDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetAccountLockedPastTimeDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountLockedPastTimeDenom(ctx, req.(*AccountLockedPastTimeDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountLockedLongerThanDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedLongerDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountLockedLongerThanDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetAccountLockedLongerThanDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountLockedLongerThanDuration(ctx, req.(*AccountLockedLongerDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountLockedLongerThanDurationDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedLongerDurationDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountLockedLongerThanDurationDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.lockup.Query/GetAccountLockedLongerThanDurationDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountLockedLongerThanDurationDenom(ctx, req.(*AccountLockedLongerDurationDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.lockup.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModuleBalance",
			Handler:    _Query_GetModuleBalance_Handler,
		},
		{
			MethodName: "GetModuleLockedAmount",
			Handler:    _Query_GetModuleLockedAmount_Handler,
		},
		{
			MethodName: "GetAccountUnlockableCoins",
			Handler:    _Query_GetAccountUnlockableCoins_Handler,
		},
		{
			MethodName: "GetAccountLockedCoins",
			Handler:    _Query_GetAccountLockedCoins_Handler,
		},
		{
			MethodName: "GetAccountLockedPastTime",
			Handler:    _Query_GetAccountLockedPastTime_Handler,
		},
		{
			MethodName: "GetAccountUnlockedBeforeTime",
			Handler:    _Query_GetAccountUnlockedBeforeTime_Handler,
		},
		{
			MethodName: "GetAccountLockedPastTimeDenom",
			Handler:    _Query_GetAccountLockedPastTimeDenom_Handler,
		},
		{
			MethodName: "GetLock",
			Handler:    _Query_GetLock_Handler,
		},
		{
			MethodName: "GetAccountLockedLongerThanDuration",
			Handler:    _Query_GetAccountLockedLongerThanDuration_Handler,
		},
		{
			MethodName: "GetAccountLockedLongerThanDurationDenom",
			Handler:    _Query_GetAccountLockedLongerThanDurationDenom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/lockup/query.proto",
}

func (m *ModuleBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ModuleBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleLockedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleLockedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleLockedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ModuleLockedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleLockedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleLockedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockableCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockableCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockableCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockableCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockableCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockableCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintQuery(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockedBeforeTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockedBeforeTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockedBeforeTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintQuery(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockedBeforeTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockedBeforeTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockedBeforeTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintQuery(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock != nil {
		{
			size, err := m.Lock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Duration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintQuery(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Duration):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintQuery(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ModuleBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ModuleBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ModuleLockedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ModuleLockedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountUnlockableCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountUnlockableCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountLockedCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedPastTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountLockedPastTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountUnlockedBeforeTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountUnlockedBeforeTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedPastTimeDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountLockedPastTimeDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovQuery(uint64(m.LockId))
	}
	return n
}

func (m *LockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lock != nil {
		l = m.Lock.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountLockedLongerDurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Duration)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountLockedLongerDurationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedLongerDurationDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Duration)
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountLockedLongerDurationDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModuleBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleLockedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleLockedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleLockedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleLockedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleLockedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleLockedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockableCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockableCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockableCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockableCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockableCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockableCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockedBeforeTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockedBeforeTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lock == nil {
				m.Lock = &PeriodLock{}
			}
			if err := m.Lock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
